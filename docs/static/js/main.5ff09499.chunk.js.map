{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","components/GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","category","setCategory","onSubmit","e","preventDefault","cats","type","value","onChange","target","GifGridItem","img","title","id","url","className","src","alt","getGifs","a","trim","fetch","resp","json","data","gifs","map","images","downsized_medium","console","log","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MA4BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAE/BC,EAF+B,KAErBC,EAFqB,KAUvC,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBAEFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAkBK,QAIpC,SACI,uBACIC,KAAK,OACLC,MAAOP,EACPQ,SAAW,SAACL,GAAD,OAAOF,EAAYE,EAAEM,OAAOF,aCJxCG,EAZK,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAEPC,GAAeD,EAAnBE,GAAmBF,EAAfC,OAAOE,EAAQH,EAARG,IAEnB,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKL,IACpB,4BAAIA,Q,uBCTVM,EAAO,uCAAG,WAAOlB,GAAP,uBAAAmB,EAAA,6DACNL,EADM,0FACmFd,EAASoB,OAD5F,sBAEOC,MAAMP,GAFb,cAENQ,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAI,SAAAf,GAAG,MAAK,CAC1BE,GAAIF,EAAIE,GACRD,MAAOD,EAAIC,MACXE,IAAKH,EAAIgB,OAAOC,iBAAiBd,QAErCe,QAAQC,IAAIL,GAVA,kBAWLA,GAXK,4CAAH,sDC8BEM,EAzBC,SAAC,GAAkB,IAAhB/B,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEHD,mBAAS,CACjCyB,KAAM,GACNQ,SAAS,IAJkB,mBAEvBC,EAFuB,KAEhBC,EAFgB,KAiB/B,OAVAC,qBAAU,WACNjB,EAAQlB,GACHoC,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAAChC,IAEGiC,EDd0BK,CAAatC,GAAjC2B,EAFiB,EAEtBH,KAAaQ,EAFS,EAETA,QAIrB,OACI,eAAC,WAAD,WACI,oBAAIjB,UAAU,oCAAd,SAAmDf,IACjDgC,EAAU,mBAAGjB,UAAU,oCAAb,qBAA+D,KAE3E,qBAAKA,UAAU,YAAf,SAEIY,EAAOD,KAAI,SAACf,GAAD,OACP,cAAC,EAAD,CAEIA,IAAMA,GADDA,EAAIE,aEUlB0B,EAzBM,WAAO,IAAD,EAEexC,mBAAS,CAAC,cAFzB,mBAEfyC,EAFe,KAEH1C,EAFG,KAKvB,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEA0C,EAAWd,KAAI,SAAA1B,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCRVyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5ff09499.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [ category, setCategory ] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setCategories(cats => [category, ...cats]);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={category}\r\n                onChange={ (e) => setCategory(e.target.value) }\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","import React from 'react';\r\n\r\nconst GifGridItem = ({ img }) => {\r\n\r\n    const { id, title, url } = img;\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifGridItem;","const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=CpWFeJiwx5LBjkixDCXFODAH86Goebtp&q=${category.trim()}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => ({\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images.downsized_medium.url\r\n    }));\r\n    console.log(gifs);\r\n    return gifs;\r\n}\r\n\r\nexport {\r\n    getGifs\r\n}","import React, { Fragment, useEffect, useState } from 'react';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    \r\n \r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading ? <p className=\"animate__animated animate__fadeIn\">Loading</p> : null }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                images.map((img) => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        img= {img}\r\n                    />\r\n                ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nconst useFetchGifs = (category) => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category]);\r\n\r\n    return state;\r\n}\r\n\r\nexport {\r\n    useFetchGifs\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport GifGrid from './GifGrid';\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [ categories, setCategories ] = useState(['Samurai X']);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>        \r\n            <AddCategory setCategories={setCategories} />\r\n            <hr/>\r\n\r\n            <ul>\r\n            {\r\n            categories.map(category => (\r\n                <GifGrid\r\n                    key={category}\r\n                    category={category}\r\n                />\r\n            ))\r\n            }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}